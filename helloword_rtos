+/*
 *
 * [File Name]     hello_world.c
 * [Platform]      DE0-nano
 * [Project]       NiosII & FreeRTOS
 * [Version]       1.00
 * [Author]        ea.rincon11
 * [Date]          24/07/2017
 * [Language]      'C'
 * [History]       1.20 - Edited from original file included in FreeRTOS V9.0.0 Nios Example
 */
//-----------------------------------------------------------------------
// Standard C/C++ Includes
//-----------------------------------------------------------------------
#include <stddef.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
//-----------------------------------------------------------------------
// Scheduler Includes
//-----------------------------------------------------------------------
#include "FreeRTOS.h"
#include "system.h"
#include "task.h"
#include "queue.h"
#include "partest.h"
#include "max7219.h"
#include "io.h"
#include "altera_up_avalon_parallel_port_regs.h"
//-----------------------------------------------------------------------
// Constants
//-----------------------------------------------------------------------
/* The rate at which the Print out message controlled by the 'Task1' */
#define mainTASK1_PERIOD	( 100 )
/* The rate at which the Print out message controlled by the 'Task2' */
#define mainTASK2_PERIOD	( 100 )

/* Priority definitions for the tasks in the demo application. */
#define mainTASK1_PRIORITY		( tskIDLE_PRIORITY + 1 )
/* Priority definitions for the tasks in the demo application. */
#define mainTASK2_PRIORITY		( tskIDLE_PRIORITY + 2 )
//-----------------------------------------------------------------------
// Function Prototypes
//-----------------------------------------------------------------------
static void prvPrintTask1( void *pvParameters );
static void prvPrintTask2( void *pvParameters );
//-----------------------------------------------------------------------
// Main Function
//-----------------------------------------------------------------------
int main()
{
	/* Configure any hardware required for this demo. */
	vParTestInitialise();
	printf("Hello from Nios II!\n");
	IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(BUTTON_PIO_BASE, 0xFFFFFFF0);
	IOWR_ALT_UP_PARALLEL_PORT_DATA(UART_BASE,0xFFFFFFFF);
	/* prvPrintTask1 uses sprintf so requires more stack. */
	xTaskCreate( prvPrintTask1, "Task1", configMINIMAL_STACK_SIZE, NULL, mainTASK1_PRIORITY, NULL );
	/* prvPrintTask2 uses sprintf so requires more stack. */
	xTaskCreate( prvPrintTask2, "Task2", configMINIMAL_STACK_SIZE, NULL, mainTASK2_PRIORITY, NULL );

    /* Finally start the scheduler. */
	vTaskStartScheduler();

	/* Will only reach here if there is insufficient heap available to start
	the scheduler. */
	for( ;; );

  return 0;
}
/*-----------------------------------------------------------*/
static void prvPrintTask1( void *pvParameters )
{
	// variable para la salida en los pines del GPIO
	unsigned int portlog=0;
	// selecionar pines de salida
	IOWR_ALT_UP_PARALLEL_PORT_DIRECTION(IO_PIO_BASE,0x0000ffff);
	// programa para generar figura
	char matriz[7];
	int derecha = 0;
	int izquierda = 0;
	int fila0 = 0;
	int fila1 = 0;
	int fila2 = 0;
	int fila3 = 0;
	int fila4 = 0;
	int fila5 = 0;
	int fila6 = 0;
	int fila7 = 0;
	int der = 0;
	int izq = 0;
	for( ;; )
	{
		der = IORD_ALT_UP_PARALLEL_PORT_DATA(BUTTON_PIO_BASE);
		izq = IORD_ALT_UP_PARALLEL_PORT_DATA(BUTTON_PIO_BASE);

		if(der == 1){
			derecha = derecha + 1;
		}

		if(izq == 1){
			izquierda = izquierda + 1;
		}

		/* Wait until it is time to run the tests again. */
		vTaskDelay( mainTASK1_PERIOD / portTICK_PERIOD_MS);
        /* Print out an message */
        printf( "TAREA 1 \r\n" );
        /*Control LED 1 DE0-NANO*/
        vParTestToggleLED(1);
        // informacion de Figura
    	matriz[0]= 0b00000000;
    	matriz[1]= 0b00000001;
    	matriz[2]= 0b00000011;
    	matriz[3]= 0b00000111;
    	matriz[4]= 0b00001111;
    	matriz[5]= 0b00011111;
    	matriz[6]= 0b00111111;
    	matriz[7]= 0b01111111;
    	matriz[8]= 0b11111111;
    	// envio de informaciÃ³n:
    	// inicio comunicacion
    	max7219_int(portlog);
    	// configuracion
    	sen_2_byte_info(portlog,ADDR_SHUTDOWN,NORMAL_OPERATION);
    	sen_2_byte_info(portlog,ADDR_SCAN_LIMIT,DIS_DIG_0_7);
    	sen_2_byte_info(portlog,ADDR_INTENSITY,INTENSITY_21_32);
    	sen_2_byte_info(portlog,ADDR_DECODE_MODE,NO_DECODE_7_0);
    	sen_2_byte_info(portlog,ADDR_DISPLAY_TEST,NORMAL_OPETAION_MODE);
    	// envio figura

    	if (derecha >= 0 && derecha <= 8){
    		fila0 = derecha;
    	}
    	if (derecha > 8 && derecha <= 16){
    		fila1 = derecha-8;
    	}
    	if (derecha > 16 && derecha <= 24){
    		fila2 = derecha-16;
    	}
    	if (izquierda >= 0 && izquierda <= 8){
    		fila7 = izquierda;
    	}
    	if (izquierda > 8 && izquierda <= 16){
    		fila6 = izquierda-8;
    	}
    	if (izquierda > 16 && izquierda <= 24){
    		fila5 = izquierda-16;
    	}
    	sen_2_byte_info(portlog,ADDR_DIG_0,matriz[fila0]);
    	sen_2_byte_info(portlog,ADDR_DIG_1,matriz[fila1]);
    	sen_2_byte_info(portlog,ADDR_DIG_2,matriz[fila2]);
    	sen_2_byte_info(portlog,ADDR_DIG_3,matriz[fila3]);
    	sen_2_byte_info(portlog,ADDR_DIG_4,matriz[fila4]);
    	sen_2_byte_info(portlog,ADDR_DIG_5,matriz[fila5]);
    	sen_2_byte_info(portlog,ADDR_DIG_6,matriz[fila6]);
    	sen_2_byte_info(portlog,ADDR_DIG_7,matriz[fila7]);


	}
}
/*-----------------------------------------------------------*/
static void prvPrintTask2( void *pvParameters )
{

	for( ;; )
	{
		/* Wait until it is time to run the tests again. */
		vTaskDelay( mainTASK2_PERIOD / portTICK_PERIOD_MS);

        /* Print out an message */
        printf( "NIOS II Task2\r\n" );
        uint16_t pixy = IORD_ALT_UP_PARALLEL_PORT_DATA(UART_BASE);
        /*Control LED 2 DE0-NANO*/
        printf(pixy);
        vParTestToggleLED(2);
	}
}
/*-----------------------------------------------------------*/
////////////////////////////////////////////////////////////////////////////////
// EOF
////////////////////////////////////////////////////////////////////////////////
